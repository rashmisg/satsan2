/**
 * @fileoverview Warns about deprecated RP components
 * @author Jason Cowdy
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function(context) {

    var classes,
        xtypes,
        keys;

    xtypes = {
        rpfiscaldatepicker: 'rpFiscalDatePicker',
        styleDisplayFromInput: 'rpStyleDisplayFromInput',
        rpdatefield: 'rpDateField',
        rpdatepicker: 'rpDirectionalDateField',
        'RP.ui.DatePicker': 'rpDirectionalDateField',
        'RP.FieldHelp': 'rpFieldHelp',
        helpbutton: 'rpHelpButton',
        'rp.anchor': 'rpAnchor',
        'rp.flow': 'rpFlow',
        'rp.table': 'rpTable',
        balloonmenu: 'rpBalloonMenu',
        boundmenu: 'rpBoundMenu',
        rptaskflowactions: 'rpTaskActions',
        rptaskform: 'rpTaskForm',
        rptfframe: 'rpApplicationFrame',
        rptfcontainer: 'rpTaskflowWidget',
        menucheckbuttonitem: 'rpCheckButtonItem',
        compdataview: 'rpComponentDataView',
        compdataviewgrid: 'rpComponentDataViewGrid',
        rpdatepickertoolbar: 'rpDatePickerToolbar',
        hyperlink: 'rpHyperlink',
        rpPrototypeHeaderContainer: 'rpPageHeader',
        rpPrototypeSearchAPIPanel: 'rpSearchAPIPanel',
        rpPrototypeSearchResultPanel: 'rpSearchResultPanel'
    };

    classes = {
        'Ext.ux.IFrameComponent': 'RP.component.IFrame',
        'RP.core.ClassOperations': 'RP.util.ClassOperations',
        'RP.core.CodeTranslator': 'RP.util.CodeTranslator',
        'RP.core.ComponentMgr': 'RP.chrome.registry.Component',
        'RP.core.IntervalJN': 'RP.util.IntervalJN',
        'RP.core.SequenceJN': 'RP.util.SequenceJN',
        'RP.core.Sundial': 'RP.date.Sundial',
        'RP.FiscalDatePicker': 'RP.field.time.FiscalDatePicker',
        'RP.form.combbox.plugin.StyleDisplayFromInput': 'RP.field.plugin.StyleDisplayFromInput',
        'RP.form.DateField': 'RP.field.time.DateField',
        'RP.form.DirectionalDateField': 'RP.field.time.DirectionalDateField',
        'RP.form.field.plugin.Help': 'RP.field.plugin.Help',
        'RP.help.Button': 'RP.chrome.help.HelpButton',
        'RP.help.Container': 'RP.chrome.help.HelpWindow',
        'RP.help.HelpRegistry': 'RP.chrome.help.HelpRegistry',
        'RP.picker.Month': 'RP.field.time.MonthPicker',
        'RP.search,model.SearchResultFlow': 'RP.chrome.search.model.ResultFlow',
        'RP.search.BooleanParser': 'RP.chrome.search.BooleanParser',
        'RP.search.field.ComboBox': 'RP.chrome.search.SearchComboBox',
        'RP.search.model.SearchAPIField': 'RP.chrome.search.model.APIField',
        'RP.search.model.SearchAPIResource': 'RP.chrome.search.model.APIResource',
        'RP.search.model.SearchCategory': 'RP.chrome.search.model.Category',
        'RP.search.model.SearchHistory': 'RP.chrome.search.model.History',
        'RP.search.StringParser': 'RP.chrome.search.StringParser',
        'RP.taskflow.Actions': 'RP.task.Actions',
        'RP.taskflow.BaseTaskForm': 'RP.task.TaskForm',
        'RP.taskflow.button.Button': 'RP.chrome.MenuButton',
        'RP.taskflow.ModuleRegistry': 'RP.chrome.registry.Module',
        'RP.taskflow.prototype.TaskflowContainerMixin': 'RP.chrome.taskflow.mixin.TaskflowContainer',
        'RP.taskflow.prototype.TaskflowFrame': 'RP.chrome.ApplicationFrame',
        'RP.taskflow.prototype.TaskflowsContainer': 'RP.chrome.taskflow.TaskflowToolbar',
        'RP.taskflow.prototype.ViewContainer': 'RP.chrome.taskflow.TaskflowViewContainer',
        'RP.taskflow.TaskContext': 'RP.navigation.TaskContext',
        'RP.taskflow.Taskflow': 'RP.navigation.Taskflow',
        'RP.taskflow.TaskflowContainer': 'RP.chrome.taskflow.TaskflowWidget',
        'RP.taskflow.TaskflowFrame': '----',
        'RP.taskflow.TaskflowRegistry': 'RP.chrome.registry.Taskflow',
        'RP.taskflow.TaskflowWidgetRegistry': 'RP.chrome.registry.TaskWidget',
        'RP.taskflow.TaskRegistry': 'RP.chrome.registry.Task',
        'RP.taskflow.TaskWidget': 'RP.task.TaskWidget',
        'RP.TimeSpan': 'RP.date.TimeSpan',
        'RP.ui.ChangePassword': 'RP.chrome.dialog.ChangePassword',
        'RP.ui.CheckButtonItem': 'RP.task.CheckButtonItem',
        'RP.ui.ComponentDataView': 'RP.dataview.ComponentDataView',
        'RP.ui.ComponentDataViewGrid': 'RP.dataview.ComponentDataViewGrid',
        'RP.ui.DatePickerToolbar': 'RP.toolbar.DatePickerToolbar',
        'RP.ui.ExportablePlugin': 'RP.plugin.ExportablePlugin',
        'RP.ui.ExternalAuthenticationExpiredDialog': 'RP.chrome.dialog.ExternalAuthenticationExpiredDialog',
        'RP.ui.Hyperlink': 'RP.component.Hyperlink',
        'RP.ui.HyperlinkBreadCrumb': 'RP.chrome.breadcrumb.HyperlinkBreadCrumb',
        'RP.ui.InactivityWarningDialog': 'RP.chrome.dialog.InactivityWarningDialog',
        'RP.ui.Mixins.Exportable': 'RP.mixin.Exportable',
        'RP.ui.Mixins.Printable': 'RP.mixin.Printable',
        'RP.ui.Mixins.Refreshable': 'RP.mixin.Refreshable',
        'RP.ui.Mixins.TimeControl': 'RP.field.mixin.TimeControl',
        'RP.ui.PrintablePlugin': 'RP.plugin.PrintablePlugin',
        'RP.ui.RefreshablePlugin': 'RP.plugin.RefreshablePlugin',
        'RP.ui.SessionExpiredDialog': 'RP.chrome.dialog.SessionExpiredDialog',
        'RP.ui.Toolbar': 'RP.toolbar.Toolbar',
        'RP.ui.ToolTip': 'RP.tooltip.ToolTip',
        'RP.upb.prototype.HeaderContainer': 'RP.chrome.PageHeader',
        'RP.upb.prototype.SearchAPIPanel': 'RP.chrome.search.SearchAPIPanel',
        'RP.upb.prototype.SearchResultPanel': 'RP.chrome.search.SearchResultPanel',
        'RP.upb.prototype.Viewport': 'RP.chrome.Viewport',
        'RP.util.BreadCrumbTrail': 'RP.chrome.breadcrumb.BreadCrumbTrail',
        'RP.util.date.RangeBuilder': 'RP.date.RangeBuilder',
        'RP.util.date.RangeParser': 'RP.date.RangeParser',
        'RP.util.DebugConsole.ComponentInspector': 'RP.chrome.debug.ComponentInspector',
        'RP.util.DebugConsole.Console': 'RP.chrome.debug.Console',
        'RP.util.DebugConsole.LayoutGuide': 'RP.chrome.debug.LayoutGuide',
        'RP.util.DebugConsole.LogViewer': 'RP.chrome.debug.LogViewer',
        'RP.util.DebugConsole.Path': 'RP.chrome.debug.Path',
        'RP.util.DebugConsole.StopWatchesPanel': 'RP.chrome.debug.StopWatchesPanel',
        'RP.util.PageInactivityChecker': 'RP.chrome.dialog.PageInactivityChecker'
    };

    keys = [
        'xtype',
        'extend',
        'selector'
    ];

    //--------------------------------------------------------------------------
    // Helpers
    //--------------------------------------------------------------------------

    function parseName(node) {
        var name;

        // Property Names
        if (node.value && node.value.value) {
            name = node.value.value;

        // Call expresions
        } else if (node.arguments && node.arguments.length) {
            name = node.arguments[0].value;

        // Property Keys
        } else if (node.key && node.key.value) {
            name = node.key.value;
        }

        if (!name || typeof name !== 'string') {
            return false;
        }

        // Strips the widget. prefix off of an xtype
        if (name.match('widget\.')) {
            name = name.match('widget\.(.*)')[1];
        }

        return name;
    }

    function getDeprecations(node) {
        var name = parseName(node),
            deprecations = [];

        if (!name) {
            return false;
        }

        // Handles deprecations within a string of xtypes
        name.split(' ').forEach(function(name) {
            var deprecated = xtypes[name] || classes[name];
            if(deprecated) {
                deprecations.push(name);
            }
        });

        return deprecations;
    }

    function getDeprecationMessage(deprecation) {
        var replacement = xtypes[deprecation] || classes[deprecation];

        return deprecation + ' has been deprecated - Use ' + replacement + ' instead.';
    }

    function logDeprecations(node, deprecations) {

        if (!deprecations || deprecations.length < 1) {
            return;
        }

        deprecations.forEach(function(deprecation) {
            context.report(node, getDeprecationMessage(deprecation));
        });
    }

    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------

    return {
        Property: function(node) {
            logDeprecations(node, getDeprecations(node));
        },
        CallExpression: function(node) {
            if (node.callee.object && node.callee.object.name === 'Ext') {
                if (node.callee.property.name === 'create' || node.callee.property.name === 'widget') {
                    logDeprecations(node, getDeprecations(node));
                }
            }
        }
    };
};

module.exports.schema = [
    // fill in your schema
];
