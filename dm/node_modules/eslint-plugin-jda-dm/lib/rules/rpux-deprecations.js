/**
 * @fileoverview Warns about deprecated RPUX components
 * @author Jason Cowdy
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function(context) {

    var classes,
        xtypes,
        keys;

    xtypes = {
        rpuxFilterableGrid: 'rpFilterableGrid',
        actionBasketButton: 'rpActionBasketButton',
        rpuxActionBasket: 'rpActionBasket',
        AggregateButton: 'rpAggregateButton',
        countbutton: 'rpCountButton',
        rpuxDrillDownButton: 'rpDrilldownButton',
        sortbutton: 'rpSortButton',
        rpuxMonthCell: 'rpCalendarCell',
        rpuxCalendarMonthHeader: 'rpCalendarHeader',
        rpuxCalendarMonthView: 'rpCalendarView',
        rpuxCategoryHeader: 'rpCategoryHeader',
        rpuxTag: 'rpTag',
        rpuxBreadCrumbTrail: 'rpBreadCrumbTrailView',
        rpuxToggleGroup: 'rpToggleGroup',
        rpuxPaginStore: 'rpPagingStore',
        exportableStore: 'rpStoreExport',
        rpuxAbstractLookupField: 'rpAbstractLookup',
        DateRangeField: 'rpDateRange',
        datetime: 'rpDateTime',
        duration: 'rpDuration',
        directionalDateField: 'rpIntervalDate',
        ComboBoxRecordCreator: 'rpComboBoxRecordCreator',
        CustomeComboBoxTrigger: 'rpCustomComboBoxTrigger',
        rpuxToggleField: 'rpToggle',
        tristategroup: 'rpTriStateGroup',
        frameworkcolumn: 'rpFrameworkColumn',
        linkcolumn: 'rpLinkColumn',
        multidatacolumn: 'rpMultiDataColumn',
        rpuxTagContainer: 'rpTag',
        multilevelgrid: 'rpMultiLevelGrid',
        aggregateToolbar: 'rpAggregateToolbar',
        exportableGrid: 'rpExportableGrid',
        rpuxTextAligner: 'rpTextAligner',
        rpuxWarningBar: 'rpWarningBar',
        centered: 'rpCentered',
        rpuxBoundList: 'rpBoundList',
        mosaic: 'rpMosaic',
        resizableCard: 'rpResizableCard',
        'rpux.tooltip': 'rpToolTip',
        'rpux.column': 'rpColumn',
        multilevelcheckboxmodel: 'rpMultiLevelCheckboxModel',
        multilevelgridview: 'rpMultiLevelGridView',
        rpuxViewEndlessScroller: 'rpEndlessScroller',
        inputwindow: 'rpInputWindow',
        rpuxSequentialWizardHeader: 'rpSequentialWizardHeader',
        rpuxSequentialWizard: 'rpSequentialWizard',
        rpuxStepSequence: 'rpStepSequence',
        rpuxFilterableViews: 'rpFilterableViews'
    };

    classes = {
        'RPUX.grid.FilterableGrid': 'RP.dataview.grid.FilterableGrid',
        'RPUX.PerformanceTimings': 'RP.performance.PerformanceTimings',
        'RPUX.picker.Date': 'RP.field.time.DatePicker',
        'RPUX.picker.DoubleDate': 'RP.field.time.DoubleDatePicker',
        'RPUX.plugin.AbstractStoreboundEndlessScroller': 'RP.dataview.plugin.AbstractStoreboundEndlessScrollerPlugin',
        'RPUX.plugin.ToolTip': 'RP.plugin.ToolTipPlugin',
        'RPUX.selection.MultiLevelCheckboxModel': 'RP.dataview.mlg.MultiLevelCheckboxModel',
        'RPUX.taskflow.App': 'RP.mvc.TaskForm',
        'RPUX.template.DateTemplates': 'RP.template.DateTemplate',
        'RPUX.template.print.Grid': 'RP.template.GridPrintTemplate',
        'RPUX.template.ProgressBar': 'RP.template.ProgressBar',
        'RPUX.ui.Constants': 'RP.toolbar.Constants',
        'RPUX.util.Dependency': 'RP.util.Dependency',
        'RPUX.util.DependencyManager': 'RP.util.DependencyManager',
        'RPUX.view.MultiLevelGrid': 'RP.dataview.mlg.MultiLevelGridView',
        'RPUX.view.plugin.EndlessScroller': 'RP.dataview.plugin.EndlessScrollerPlugin',
        'RPUX.window.Input': 'RP.util.InputWindow',
        'RPUX.wizard.controller.SequentialWizard': 'RP.wizard.SequentialWizardController',
        'RPUX.wizard.view.SequentialHeader': 'RP.wizard.SequentialHeader',
        'RPUX.wizard.view.SequentialWizard': 'RP.wizard.SequentialWizard',
        'RPUX.wizard.view.StepSequence': 'RP.wizard.StepSequence',
        'RPUX.AbstractPlugin':	'RP.plugin.AbstractPlugin',
        'RPUX.actionbasket.ActionBasketApp': 'RP.actionbasket.ActionBasketApp',
        'RPUX.actionbasket.Button': 'RP.actionbasket.Button',
        'RPUX.actionbasket.view.ActionBasket': 'RP.actionbasket.view.ActionBasket',
        'RPUX.app.App': 'RP.mvc.Applet',
        'RPUX.app.QuickApp': 'RP.mvc.QuickApp',
        'RPUX.app.QuickAppManager': 'RP.mvc.QuickAppManager',
        'RPUX.button.Aggregate': 'RP.button.Aggregate',
        'RPUX.button.Count': 'RP.button.Count',
        'RPUX.button.Drilldown': 'RP.button.Drilldown',
        'RPUX.button.Sort': 'RP.button.Sort',
        'RPUX.calendar.Calendar': 'RP.calendar.Calendar',
        'RPUX.calendar.month.Cell': 'RP.calendar.Cell',
        'RPUX.calendar.month.Header': 'RP.calendar.Header',
        'RPUX.calendar.month.Picker': 'RP.calendar.Picker',
        'RPUX.calendar.month.RowView': 'RP.calendar.RowView',
        'RPUX.calendar.month.View': 'RP.calendar.View',
        'RPUX.calendar.month.WeekHeader': 'RP.calendar.WeekHeader',
        'RPUX.component.CategoryHeader': 'RP.component.CategoryHeader',
        'RPUX.component.Tag': 'RP.dataview.Tag',
        'RPUX.container.BreadCrumbTrail': 'RP.chrome.breadcrumb.BreadCrumbTrailView',
        'RPUX.container.ToggleGroup': 'RP.field.ToggleGroup',
        'RPUX.data.PagingStorePlugin': 'RP.dataview.plugin.PagingStorePlugin',
        'RPUX.Date': 'RP.Date',
        'RPUX.Enumeration': 'RP.util.Enumeration',
        'RPUX.Enum': 'RP.Enum',
        'RPUX.exportable.plugin.Store': 'RP.plugin.StoreExportPlugin',
        'RPUX.form.field.AbstractLookup': 'RP.field.lookup.AbstractLookup',
        'RPUX.form.field.DateRange': 'RP.field.time.DateRange',
        'RPUX.form.field.DateTime': 'RP.field.time.DateTime',
        'RPUX.form.field.Duration': 'RP.field.time.Duration',
        'RPUX.form.field.IntervalDate': 'RP.field.time.IntervalDate',
        'RPUX.form.field.plugin.ComboBoxRecordCreator': 'RP.field.plugin.ComboBoxRecordCreator',
        'RPUX.form.field.plugin.CustomComboBoxTrigger': 'RP.field.plugin.CustomComboBoxTrigger',
        'RPUX.form.field.SelModelCheckbox': 'RP.dataview.SelModelCheckbox',
        'RPUX.form.field.Toggle': 'RP.field.Toggle',
        'RPUX.form.TriStateGroup': 'RP.field.TriStateGroup',
        'RPUX.grid.render.*': 'RP.dataview.Renderer',
        'RPUX.grid.column.FrameworkColumn': 'RP.dataview.column.FrameworkColumn',
        'RPUX.grid.column.LinkColumn': 'RP.dataview.column.LinkColumn',
        'RPUX.grid.column.MultiDataColumn': 'RP.dataview.column.MultiDataColumn',
        'RPUX.grid.feature.TagContainer': 'RP.dataview.feature.TagContainer',
        'RPUX.grid.feature.TagMixin': 'RP.dataview.mixin.Tag',
        'RPUX.grid.MultiLevelGrid': 'RP.dataview.mlg.MultiLevelGrid',
        'RPUX.grid.plugin.AggregateToolbar': 'RP.dataview.plugin.AggregateToolbarPlugin',
        'RPUX.grid.plugin.Exportable': 'RP.dataview.plugin.ExportableGridPlugin',
        'RPUX.grid.plugin.TextAligner': 'RP.dataview.plugin.TextAlignerPlugin',
        'RPUX.grid.plugin.WarningBar': 'RP.dataview.plugin.WarningBarPlugin',
        'RPUX.layout.CenteredLayout': 'RP.layout.Centered',
        'RPUX.layout.Column': 'RP.layout.Column',
        'RPUX.layout.component.BoundList': 'RP.layout.BoundList',
        'RPUX.layout.Flow': 'RP.layout.Flow',
        'RPUX.layout.mosaic.MosaicLayout': 'RP.layout.Mosaic',
        'RPUX.layout.ResizableCard': 'RP.layout.ResizableCard',
        'RPUX.menu.BoundMenu': 'RP.menu.BoundMenu',
        'RPUX.mixins.Countable': 'RP.mixin.Countable',
        'RPUX.mixins.Maskable': 'RP.mixin.Maskable',
        'RPUX.Monitor':	'RP.performance.Monitor',
        'RPUX.panel.FilterableViews': 'RPUX.views.rp.FilterableViews'
    };

    keys = [
        'xtype',
        'extend',
        'selector'
    ];

    //--------------------------------------------------------------------------
    // Helpers
    //--------------------------------------------------------------------------

    function parseName(node) {
        var name;

        // Property Names
        if (node.value && node.value.value) {
            name = node.value.value;

        // Call expresions
        } else if (node.arguments && node.arguments.length) {
            name = node.arguments[0].value;

        // Property Keys
        } else if (node.key && node.key.value) {
            name = node.key.value;
        }

        if (!name || typeof name !== 'string') {
            return false;
        }

        // Strips the widget. prefix off of an xtype
        if (name.match('widget\.')) {
            name = name.match('widget\.(.*)')[1];
        }

        return name;
    }

    function getDeprecations(node) {
        var name = parseName(node),
            deprecations = [];

        if (!name) {
            return false;
        }

        // Handles deprecations within a string of xtypes
        name.split(' ').forEach(function(name) {
            var deprecated = xtypes[name] || classes[name];
            if(deprecated) {
                deprecations.push(name);
            }
        });

        return deprecations;
    }

    function getDeprecationMessage(deprecation) {
        var replacement = xtypes[deprecation] || classes[deprecation];

        return deprecation + ' has been deprecated - Use ' + replacement + ' instead.';
    }

    function logDeprecations(node, deprecations) {

        if (!deprecations || deprecations.length < 1) {
            return;
        }

        deprecations.forEach(function(deprecation) {
            context.report(node, getDeprecationMessage(deprecation));
        });
    }

    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------

    return {
        Property: function(node) {
            logDeprecations(node, getDeprecations(node));
        },
        CallExpression: function(node) {
            if (node.callee.object && node.callee.object.name === 'Ext') {
                if (node.callee.property.name === 'create' || node.callee.property.name === 'widget') {
                    logDeprecations(node, getDeprecations(node));
                }
            }
        }
    };
};

module.exports.schema = [
    // fill in your schema
];
