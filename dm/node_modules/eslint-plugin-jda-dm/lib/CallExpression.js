function CallExpression(node) {
    this.node = node;
    this.parseCallExpression(node);
}

CallExpression.prototype.toString = function() {
    return this.getCallHeirarchy().join('.');
}

/**
 * Returns the call heirarchy.
 * @return {String[]} Call heirarchy.
 */
CallExpression.prototype.getCallHeirarchy = function() {
    return this.callHeirarchy;
}

/**
 * Returns the actual arguments the expression was called with.
 * @return {Mixed[]} Arguments.
 */
CallExpression.prototype.getArgs = function() {
    return this.arguments;
}

/**
 * @private
 * Parse the call expression to get the arguments and callee.
 * @param  {Object} node CallExpression node.
 */
CallExpression.prototype.parseCallExpression = function(node) {
    if (node.arguments) {
        this.arguments = node.arguments;
    }

    if (node.callee) {
        this.callHeirarchy = this.parseCallee(node.callee);
    }
}

/**
 * @private
 * Recursively parses the callee to figure out the call heirarchy.
 * @param  {Object} node Callee/MemberExpression node to parse.
 * @param  {Array} callHeirarchy Call heirarchy up to this point.
 */
CallExpression.prototype.parseCallee = function(node, callHeirarchy) {
    callHeirarchy = callHeirarchy || [];

    if (!node) {
        return callHeirarchy.reverse();
    }

    if (!node.name && !node.property) {
        return ['?'];
    }

    callHeirarchy.push(node.name || node.property.name);

    if (node.object && node.object.name) {
        callHeirarchy.push(node.object.name);
    }

    if (node.object && node.object.type === 'MemberExpression') {
        return this.parseCallee(node.object, callHeirarchy);
    }

    return callHeirarchy.reverse();
}

module.exports = CallExpression;
